package com.codingfeel.sm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.codingfeel.sm.model.MessageModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_MODEL".
*/
public class MessageModelDao extends AbstractDao<MessageModel, String> {

    public static final String TABLENAME = "MESSAGE_MODEL";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Uid = new Property(1, Integer.class, "uid", false, "UID");
        public final static Property ClientId = new Property(2, String.class, "clientId", false, "CLIENT_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property InfoId = new Property(5, String.class, "infoId", false, "INFO_ID");
        public final static Property InfoCommentId = new Property(6, Integer.class, "infoCommentId", false, "INFO_COMMENT_ID");
        public final static Property PostId = new Property(7, String.class, "postId", false, "POST_ID");
        public final static Property PostCommentId = new Property(8, Integer.class, "postCommentId", false, "POST_COMMENT_ID");
        public final static Property PushTitle = new Property(9, String.class, "pushTitle", false, "PUSH_TITLE");
        public final static Property PushContent = new Property(10, String.class, "pushContent", false, "PUSH_CONTENT");
        public final static Property MessageTitle = new Property(11, String.class, "messageTitle", false, "MESSAGE_TITLE");
        public final static Property MessageContent = new Property(12, String.class, "messageContent", false, "MESSAGE_CONTENT");
        public final static Property MessageExt1 = new Property(13, String.class, "messageExt1", false, "MESSAGE_EXT1");
        public final static Property MessageExt2 = new Property(14, String.class, "messageExt2", false, "MESSAGE_EXT2");
        public final static Property CreateTime = new Property(15, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property LocalType = new Property(16, int.class, "localType", false, "LOCAL_TYPE");
        public final static Property Avatar = new Property(17, String.class, "avatar", false, "AVATAR");
    };


    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_MODEL\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"UID\" INTEGER," + // 1: uid
                "\"CLIENT_ID\" TEXT," + // 2: clientId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"STATUS\" INTEGER," + // 4: status
                "\"INFO_ID\" TEXT," + // 5: infoId
                "\"INFO_COMMENT_ID\" INTEGER," + // 6: infoCommentId
                "\"POST_ID\" TEXT," + // 7: postId
                "\"POST_COMMENT_ID\" INTEGER," + // 8: postCommentId
                "\"PUSH_TITLE\" TEXT," + // 9: pushTitle
                "\"PUSH_CONTENT\" TEXT," + // 10: pushContent
                "\"MESSAGE_TITLE\" TEXT," + // 11: messageTitle
                "\"MESSAGE_CONTENT\" TEXT," + // 12: messageContent
                "\"MESSAGE_EXT1\" TEXT," + // 13: messageExt1
                "\"MESSAGE_EXT2\" TEXT," + // 14: messageExt2
                "\"CREATE_TIME\" INTEGER," + // 15: createTime
                "\"LOCAL_TYPE\" INTEGER NOT NULL ," + // 16: localType
                "\"AVATAR\" TEXT);"); // 17: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(3, clientId);
        }
        stmt.bindLong(4, entity.getType());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(6, infoId);
        }
 
        Integer infoCommentId = entity.getInfoCommentId();
        if (infoCommentId != null) {
            stmt.bindLong(7, infoCommentId);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(8, postId);
        }
 
        Integer postCommentId = entity.getPostCommentId();
        if (postCommentId != null) {
            stmt.bindLong(9, postCommentId);
        }
 
        String pushTitle = entity.getPushTitle();
        if (pushTitle != null) {
            stmt.bindString(10, pushTitle);
        }
 
        String pushContent = entity.getPushContent();
        if (pushContent != null) {
            stmt.bindString(11, pushContent);
        }
 
        String messageTitle = entity.getMessageTitle();
        if (messageTitle != null) {
            stmt.bindString(12, messageTitle);
        }
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(13, messageContent);
        }
 
        String messageExt1 = entity.getMessageExt1();
        if (messageExt1 != null) {
            stmt.bindString(14, messageExt1);
        }
 
        String messageExt2 = entity.getMessageExt2();
        if (messageExt2 != null) {
            stmt.bindString(15, messageExt2);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(16, createTime.getTime());
        }
        stmt.bindLong(17, entity.getLocalType());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(18, avatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(3, clientId);
        }
        stmt.bindLong(4, entity.getType());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(6, infoId);
        }
 
        Integer infoCommentId = entity.getInfoCommentId();
        if (infoCommentId != null) {
            stmt.bindLong(7, infoCommentId);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(8, postId);
        }
 
        Integer postCommentId = entity.getPostCommentId();
        if (postCommentId != null) {
            stmt.bindLong(9, postCommentId);
        }
 
        String pushTitle = entity.getPushTitle();
        if (pushTitle != null) {
            stmt.bindString(10, pushTitle);
        }
 
        String pushContent = entity.getPushContent();
        if (pushContent != null) {
            stmt.bindString(11, pushContent);
        }
 
        String messageTitle = entity.getMessageTitle();
        if (messageTitle != null) {
            stmt.bindString(12, messageTitle);
        }
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(13, messageContent);
        }
 
        String messageExt1 = entity.getMessageExt1();
        if (messageExt1 != null) {
            stmt.bindString(14, messageExt1);
        }
 
        String messageExt2 = entity.getMessageExt2();
        if (messageExt2 != null) {
            stmt.bindString(15, messageExt2);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(16, createTime.getTime());
        }
        stmt.bindLong(17, entity.getLocalType());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(18, avatar);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clientId
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // infoId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // infoCommentId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // postId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // postCommentId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pushTitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pushContent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // messageTitle
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // messageContent
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // messageExt1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // messageExt2
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // createTime
            cursor.getInt(offset + 16), // localType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // avatar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setClientId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setInfoId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInfoCommentId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPostId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPostCommentId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPushTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPushContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMessageTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMessageContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMessageExt1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMessageExt2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateTime(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setLocalType(cursor.getInt(offset + 16));
        entity.setAvatar(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageModel entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    public boolean hasKey(MessageModel entity) {
        return entity.getUuid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
